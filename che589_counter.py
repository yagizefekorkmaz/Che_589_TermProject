# -*- coding: utf-8 -*-
"""Che589_Counter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t0VSaHcX5QQq9xQPQO_YGo0NOiledPyU
"""

import numpy as np
import math
import pandas as pd
import MDAnalysis as mda
import matplotlib.pyplot as plt

sum_delta = pd.read_csv('sum_of_rows_cutoff_0.9.txt', sep=" ", header=None)
bin_delta = pd.read_csv('bin_delta_cutoff_0.9.txt', sep=" ", header=None)

#-------To determine Max, Min and Closest to Zero Values---------

max = 0
min = 0
dist_to_zero = 5

for i in range(0,320) : 
  if max < sum_delta.iloc[i,0] :
    max = sum_delta.iloc[i,0]
    max_index = i
  if min > sum_delta.iloc[i,0] :
    min = sum_delta.iloc[i,0]
    min_index = i
  if dist_to_zero > abs(sum_delta.iloc[i,0]) :
    app_zero = sum_delta.iloc[i,0]
    app_zero_index = i

max_bin_delta = bin_delta.iloc[max_index,:]
min_bin_delta = bin_delta.iloc[min_index,:]
app_zero_bin_delta = bin_delta.iloc[app_zero_index,:]

#-------Plotting-------------
#---MAX---
for i in range(0,5):
  plt.figure(i)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  max_bin_bin_delta_100 = max_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,max_bin_bin_delta_100, 'b',lw=0.8, label=r"$Max_Bin Delta$")
  plt.savefig("Max_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

for i in range(500,505):
  plt.figure(i)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  max_bin_bin_delta_100 = max_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,max_bin_bin_delta_100, 'b',lw=0.8, label=r"$Max_Bin Delta$")
  plt.savefig("Max_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

for i in range(900,905):
  plt.figure(i)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  max_bin_bin_delta_100 = max_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,max_bin_bin_delta_100, 'b',lw=0.8, label=r"$Max_Bin Delta$")
  plt.savefig("Max_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

#---MIN---
for i in range(0,5):
  plt.figure(i+10)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  min_bin_bin_delta_100 = min_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,min_bin_bin_delta_100, 'b',lw=0.8, label=r"$Min_Bin Delta$")
  plt.savefig("Min_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

for i in range(500,505):
  plt.figure(i+10)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  min_bin_bin_delta_100 = min_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,min_bin_bin_delta_100, 'b',lw=0.8, label=r"$Min_Bin Delta$")
  plt.savefig("Min_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

for i in range(900,905):
  plt.figure(i+10)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  min_bin_bin_delta_100 = min_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,min_bin_bin_delta_100, 'b',lw=0.8, label=r"$Min_Bin Delta$")
  plt.savefig("Min_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

#---APP ZERO---
for i in range(0,5):
  plt.figure(i+20)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  app_zero_bin_delta_100 = app_zero_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,app_zero_bin_delta_100, 'b',lw=0.8, label=r"$App_Zero Delta$")
  plt.savefig("App_Zero_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")

for i in range(500,505):
  plt.figure(i+20)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  app_zero_bin_delta_100 = app_zero_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,app_zero_bin_delta_100, 'b',lw=0.8, label=r"$App_Zero Delta$")
  plt.savefig("App_Zero_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")


for i in range(900,905):
  plt.figure(i+20)
  frames_100 = np.linspace(100*i,(100*i)+100,100)
  app_zero_bin_delta_100 = app_zero_bin_delta.iloc[100*i:(100*i)+100]
  plt.plot(frames_100,app_zero_bin_delta_100, 'b',lw=0.8, label=r"$App_Zero Delta$")
  plt.savefig("App_Zero_Disp_Binary"+str(100*i)+"_"+str((100*i)+100)+".pdf")